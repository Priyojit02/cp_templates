class DSU{
    vector<int>parent;
    vector<int>subtree_size;
    int N;
    public:
    DSU(int n){
        N=n;
        parent=vector<int>(n+1,0);
        subtree_size=vector<int>(n+1,1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }
    int findroot(int x){
        if(x!=parent[x]){
            parent[x]=parent[parent[x]];
            x=parent[x];
        }
        return x;
    }
    void combine(int x,int y){
        int rx= findroot(x);
        int ry=findroot(y);
        if(subtree_size[rx]>subtree_size[ry]){
            parent[ry]=rx;
            subtree_size[rx]+=subtree_size[ry];

        }else{
             parent[rx]=ry;
            subtree_size[ry]+=subtree_size[rx];
        }
    }

};
